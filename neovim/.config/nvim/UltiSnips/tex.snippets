global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
        return first != ignore
    except StopIteration:
        return False
endglobal

snippet notecard
\documentclass[10pt]{article}
\usepackage[paperheight=3in,paperwidth=5in,margin=0in]{geometry}
\usepackage[letter,frame,center]{crop}
\usepackage{amsmath}
\usepackage{bm}
\usepackage[cache=false]{minted}

\begin{document}

\setlength{\abovedisplayskip}{2pt}
\setlength{\belowdisplayskip}{2pt}

\begin{tiny}
\end{tiny}
\end{document}
endsnippet

snippet nc_section
\noindent\textbf{${1:1.1}} ${2: Section Title}

${3:information}

\noindent\rule{\textwidth}{0.2pt}
endsnippet


snippet hw
\documentclass[answers]{exam}

\usepackage{extramarks}
\usepackage{enumerate}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amsfonts}
\usepackage{tikz}
\usepackage[plain]{algorithm}
\usepackage{algpseudocode}

% \usetikzlibrary{automata,positioning}

%
% Basic Document Settings
%

\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in

\linespread{1.1}

\pagestyle{headandfoot}
\lhead{\hmwkAuthorName}
\rhead{\hmwkClass\ : \hmwkType\ \#\hmwkNumber}
\cfoot{\thepage}
% \renewcommand\headrulewidth{0.4pt}
% \renewcommand\footrulewidth{0.4pt}

\setlength\parindent{0pt}

%
% Create Problem Sections
%
\qformat{\textbf{Question \thequestiontitle}\quad \hfill}

\newcommand{\hmwkType}{Homework}
\newcommand{\hmwkNumber}{6}
\newcommand{\hmwkClass}{STATS 412}
\newcommand{\hmwkAuthorName}{\textbf{Naitian Zhou}}

%
% Title Page
%

\author{\hmwkAuthorName}

%
% Various Helper Commands
%

% Useful for algorithms
\newcommand{\alg}[1]{\textsc{\bfseries \footnotesize #1}}

% For derivatives
\newcommand{\deriv}[1]{\frac{\mathrm{d}}{\mathrm{d}x} (#1)}

% For partial derivatives
\newcommand{\pderiv}[2]{\frac{\partial}{\partial #1} (#2)}

% Integral dx
\newcommand{\dx}{\mathrm{d}x}

% Probability commands: Expectation, Variance, Covariance, Bias
\newcommand{\E}{\mathrm{E}}
\newcommand{\Var}{\mathrm{Var}}
\newcommand{\Cov}{\mathrm{Cov}}
\newcommand{\Bias}{\mathrm{Bias}}

\newcommand{\Exp}[1]{\mathrm{Exp}(\lambda = #1)}
\newcommand{\Poisson}[1]{\mathrm{Poisson}(\lambda = #1)}
\newcommand{\Gaussian}[2]{\mathrm{N}(#1, #2)}
\newcommand{\Binom}[2]{\mathrm{Bin}(#1, #2)}

\begin{document}
\begin{questions}
\end{questions}
\end{document}
endsnippet

snippet question
\question[${1:1}] Section ${2:1.1} Problem ${3:1}
\begin{solution}
	% TODO
\end{solution}
endsnippet

snippet ismatrix
\left[ \begin{smallmatrix}
	${1}
\end{smallmatrix} \right]
endsnippet

snippet imatrix "table" w
\left[ \begin{array}{${1}}
	${2}
\end{array} \right]
endsnippet

snippet bmatrix "bmatrix" w
\begin{bmatrix}
	${1}
\end{bmatrix}
endsnippet

snippet basis "basis" w
\left[${1}\right]_{\mathcal{${2}}}
endsnippet

snippet mcal "\mathcal" w
\mathcal{${1}}
endsnippet

snippet mbb "\mathbb" w
\mathbb{${1}}
endsnippet

snippet lb "\left(\right)" w
\left(${1}\right)
endsnippet

snippet lB "\left[\right]" w
\left[${1}\right]
endsnippet

snippet lA "\langle\rangle" w
\langle${1}\rangle
endsnippet

snippet bar "\bar{}" w
\bar{${1}}
endsnippet

snippet vec "\vec{}" w
\vec{${1}}
endsnippet

snippet ^^ "^{}" A
^{${1}}
endsnippet

context "math()"
snippet mu "" iA
\mu
endsnippet

snippet mk "Math" wA
$${1}$$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet bv| "\bigg \lvert \bigg \rvert"
\bigg\lvert $1 \bigg\rvert
endsnippet

context "math()"
snippet eval "\bigg \lvert_{}^{}"
\bigg\lvert_{$1}^{$2}$0
endsnippet

snippet " "Latex quote" i
\`\`${1:${VISUAL}}''
endsnippet
